/**
 * Production-ready JavaScript
 * Console.log statements removed for production deployment
 * Generated by fix-code-quality.js
 */

/**
 * Decks Page JavaScript
 * Handles deck builder, templates, and deck management functionality
 */

export async function initPage(params = '') {
    // Initialize deck builder
    initializeDeckBuilder();
    
    // Load user decks
    setTimeout(() => {
        loadUserDecks();
    }, 100);
    
    // Set up global functions
    setupGlobalFunctions();
}

function initializeDeckBuilder() {
    // Initialize deck builder when needed
    if (!window.deckBuilder) {
        window.deckBuilder = new DeckBuilderService();
    }
}

function setupGlobalFunctions() {
    // Make all deck functions globally available
    window.createNewDeck = function() {
        if (window.deckBuilder) {
            window.deckBuilder.newDeck();
            showDeckBuilder();
        } else {
            console.error('deckBuilder not available');
        }
    };
    
    window.importDeck = function() {
        if (window.deckBuilder) {
            window.deckBuilder.openLoadDeckModal();
        } else {
            console.error('deckBuilder not available');
        }
    };
    
    window.showDeckTemplates = async function() {
        if (!window.deckBuilder) {
            console.error('deckBuilder not available');
            return;
        }
        
        // Load templates directly into the popular decks section
        try {
            const templates = await window.deckBuilder.getDeckTemplates();
            const container = document.getElementById('templates-container');
            if (container) {
                container.innerHTML = generateTemplatesGridHTML(templates);
            }
            
            // Switch to popular decks section to show templates
            showPopularDecks();
        } catch (error) {
            console.error('Error loading deck templates:', error);
            alert('Error loading deck templates. Please try again.');
        }
    };

    window.showMyDecks = function() {
        const myDecksSection = document.getElementById('my-decks-section');
        const builderSection = document.getElementById('deck-builder-section');
        const popularSection = document.getElementById('popular-decks-section');
        
        if (myDecksSection) myDecksSection.style.display = 'block';
        if (builderSection) builderSection.style.display = 'none';
        if (popularSection) popularSection.style.display = 'none';
        
        const myDecksBtn = document.getElementById('my-decks-btn');
        const builderBtn = document.getElementById('builder-btn');
        const popularBtn = document.getElementById('popular-btn');
        
        if (myDecksBtn) myDecksBtn.classList.add('active');
        if (builderBtn) builderBtn.classList.remove('active');
        if (popularBtn) popularBtn.classList.remove('active');
        
        loadUserDecks();
    };

    window.showDeckBuilder = function() {
        const myDecksSection = document.getElementById('my-decks-section');
        const builderSection = document.getElementById('deck-builder-section');
        const popularSection = document.getElementById('popular-decks-section');
        
        if (myDecksSection) myDecksSection.style.display = 'none';
        if (builderSection) builderSection.style.display = 'block';
        if (popularSection) popularSection.style.display = 'none';
        
        const myDecksBtn = document.getElementById('my-decks-btn');
        const builderBtn = document.getElementById('builder-btn');
        const popularBtn = document.getElementById('popular-btn');
        
        if (myDecksBtn) myDecksBtn.classList.remove('active');
        if (builderBtn) builderBtn.classList.add('active');
        if (popularBtn) popularBtn.classList.remove('active');
    };

    window.showPopularDecks = function() {
        const myDecksSection = document.getElementById('my-decks-section');
        const builderSection = document.getElementById('deck-builder-section');
        const popularSection = document.getElementById('popular-decks-section');
        
        if (myDecksSection) myDecksSection.style.display = 'none';
        if (builderSection) builderSection.style.display = 'none';
        if (popularSection) popularSection.style.display = 'block';
        
        const myDecksBtn = document.getElementById('my-decks-btn');
        const builderBtn = document.getElementById('builder-btn');
        const popularBtn = document.getElementById('popular-btn');
        
        if (myDecksBtn) myDecksBtn.classList.remove('active');
        if (builderBtn) builderBtn.classList.remove('active');
        if (popularBtn) popularBtn.classList.add('active');
        
        // Load templates when showing popular decks
        loadDeckTemplates();
    };

    window.loadUserDecks = loadUserDecks;
    window.sortDecks = sortDecks;
    window.refreshDeckList = refreshDeckList;
    window.editDeck = editDeck;
    window.duplicateDeck = duplicateDeck;
    window.exportDeck = exportDeck;
    window.deleteDeckConfirm = deleteDeckConfirm;
    window.testDeck = testDeck;
    window.showTemplateCategory = showTemplateCategory;
    window.loadDeckTemplate = loadDeckTemplate;
    window.buyDeckTemplate = buyDeckTemplate;
    window.searchCards = searchCards;
}

function loadUserDecks() {
    const savedDecks = window.deckBuilder ? window.deckBuilder.getSavedDecks() : {};
    const container = document.getElementById('user-decks-grid');
    
    if (!container) {
        console.error('user-decks-grid container not found');
        return;
    }
    
    if (Object.keys(savedDecks).length === 0) {
        container.innerHTML = `
            <div style="text-align: center; padding: var(--space-12); color: var(--gray-500);">
                <div style="font-size: 4rem; margin-bottom: var(--space-4);">üÉè</div>
                <h3 style="font-size: 1.5rem; font-weight: 600; margin-bottom: var(--space-3);">No Decks Yet</h3>
                <p style="margin-bottom: var(--space-6);">Create your first deck to get started!</p>
                <button class="primary-btn" onclick="createNewDeck()">Create New Deck</button>
            </div>
        `;
        return;
    }
    
    const sortedDecks = Object.entries(savedDecks).sort((a, b) => {
        const sortBy = document.getElementById('deck-sort')?.value || 'updated';
        switch (sortBy) {
            case 'created':
                return new Date(b[1].metadata.createdAt) - new Date(a[1].metadata.createdAt);
            case 'name':
                return a[1].metadata.name.localeCompare(b[1].metadata.name);
            default: // updated
                return new Date(b[1].metadata.updatedAt) - new Date(a[1].metadata.updatedAt);
        }
    });
    
    container.innerHTML = sortedDecks.map(([id, deckData]) => generateDeckCardHTML(id, deckData)).join('');
}

function generateDeckCardHTML(id, deckData) {
    const stats = calculateDeckStats(deckData.deck);
    const lastModified = new Date(deckData.metadata.updatedAt).toLocaleDateString();
    
    return `
        <div class="deck-card-item" style="background: white; border-radius: var(--radius-xl); box-shadow: var(--shadow-md); border: 1px solid var(--gray-200); overflow: hidden; transition: var(--transition-fast);" onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='var(--shadow-lg)'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='var(--shadow-md)'">
            <div style="padding: var(--space-6);">
                <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: var(--space-4);">
                    <div>
                        <h3 style="font-size: 1.25rem; font-weight: 600; color: var(--gray-900); margin-bottom: var(--space-1);">${deckData.metadata.name}</h3>
                        <p style="color: var(--gray-600); font-size: 0.875rem;">Modified: ${lastModified}</p>
                    </div>
                    <div class="deck-actions" style="display: flex; gap: var(--space-2);">
                        <button onclick="editDeck('${id}')" style="padding: var(--space-1) var(--space-2); background: var(--primary-color); color: white; border: none; border-radius: var(--radius-sm); font-size: 0.75rem; cursor: pointer;" title="Edit Deck">‚úèÔ∏è</button>
                        <button onclick="duplicateDeck('${id}')" style="padding: var(--space-1) var(--space-2); background: var(--secondary-color); color: var(--gray-900); border: none; border-radius: var(--radius-sm); font-size: 0.75rem; cursor: pointer;" title="Duplicate">üìã</button>
                        <button onclick="exportDeck('${id}')" style="padding: var(--space-1) var(--space-2); background: var(--accent-color); color: var(--gray-900); border: none; border-radius: var(--radius-sm); font-size: 0.75rem; cursor: pointer;" title="Export">üì§</button>
                        <button onclick="deleteDeckConfirm('${id}')" style="padding: var(--space-1) var(--space-2); background: var(--error-color); color: white; border: none; border-radius: var(--radius-sm); font-size: 0.75rem; cursor: pointer;" title="Delete">üóëÔ∏è</button>
                    </div>
                </div>
                
                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: var(--space-3); margin-bottom: var(--space-4);">
                    <div style="text-align: center; padding: var(--space-2); background: var(--gray-50); border-radius: var(--radius-md);">
                        <div style="font-size: 1.25rem; font-weight: 700; color: ${stats.main.total < 40 || stats.main.total > 60 ? 'var(--error-color)' : 'var(--success-color)'};">${stats.main.total}</div>
                        <div style="font-size: 0.75rem; color: var(--gray-600);">Main Deck</div>
                    </div>
                    <div style="text-align: center; padding: var(--space-2); background: var(--gray-50); border-radius: var(--radius-md);">
                        <div style="font-size: 1.25rem; font-weight: 700; color: ${stats.extra.total > 15 ? 'var(--error-color)' : 'var(--success-color)'};">${stats.extra.total}</div>
                        <div style="font-size: 0.75rem; color: var(--gray-600);">Extra Deck</div>
                    </div>
                    <div style="text-align: center; padding: var(--space-2); background: var(--gray-50); border-radius: var(--radius-md);">
                        <div style="font-size: 1.25rem; font-weight: 700; color: ${stats.side.total > 15 ? 'var(--error-color)' : 'var(--success-color)'};">${stats.side.total}</div>
                        <div style="font-size: 0.75rem; color: var(--gray-600);">Side Deck</div>
                    </div>
                </div>
                
                ${deckData.metadata.description ? `
                    <p style="color: var(--gray-600); font-size: 0.875rem; line-height: 1.4; margin-bottom: var(--space-4);">${deckData.metadata.description}</p>
                ` : ''}
                
                <div style="display: flex; gap: var(--space-3);">
                    <button onclick="editDeck('${id}')" style="flex: 1; padding: var(--space-3); background: var(--primary-color); color: white; border: none; border-radius: var(--radius-md); font-weight: 600; cursor: pointer;">
                        View/Edit Deck
                    </button>
                    <button onclick="testDeck('${id}')" style="flex: 1; padding: var(--space-3); background: var(--gray-100); color: var(--gray-700); border: none; border-radius: var(--radius-md); font-weight: 600; cursor: pointer;">
                        Test Deck
                    </button>
                </div>
            </div>
        </div>
    `;
}

function calculateDeckStats(deck) {
    const stats = {
        main: { total: 0, monsters: 0, spells: 0, traps: 0 },
        extra: { total: 0, fusion: 0, synchro: 0, xyz: 0, link: 0 },
        side: { total: 0 }
    };
    
    if (deck.main) {
        stats.main.total = deck.main.reduce((sum, card) => sum + (card.quantity || 1), 0);
        deck.main.forEach(card => {
            const qty = card.quantity || 1;
            if (card.type && card.type.includes('Monster')) {
                stats.main.monsters += qty;
            } else if (card.type && card.type.includes('Spell')) {
                stats.main.spells += qty;
            } else if (card.type && card.type.includes('Trap')) {
                stats.main.traps += qty;
            }
        });
    }
    
    if (deck.extra) {
        stats.extra.total = deck.extra.reduce((sum, card) => sum + (card.quantity || 1), 0);
    }
    
    if (deck.side) {
        stats.side.total = deck.side.reduce((sum, card) => sum + (card.quantity || 1), 0);
    }
    
    return stats;
}

async function loadDeckTemplates() {
    if (!window.deckBuilder) return;
    
    try {
        const templates = await window.deckBuilder.getDeckTemplates();
        const container = document.getElementById('templates-container');
        if (container) {
            container.innerHTML = generateTemplatesGridHTML(templates);
        }
    } catch (error) {
        console.error('Error loading deck templates:', error);
    }
}

function generateTemplatesGridHTML(templates) {
    if (!templates || templates.length === 0) {
        return `
            <div style="text-align: center; padding: var(--space-12); color: var(--gray-500);">
                <div style="font-size: 4rem; margin-bottom: var(--space-4);">üÉè</div>
                <h3 style="font-size: 1.5rem; font-weight: 600; margin-bottom: var(--space-3);">No Templates Available</h3>
                <p>Check back later for deck templates!</p>
            </div>
        `;
    }

    return `
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: var(--space-6);">
            ${templates.map(template => `
                <div class="template-card" style="background: white; border-radius: var(--radius-xl); box-shadow: var(--shadow-lg); overflow: hidden; border: 1px solid var(--gray-200); transition: var(--transition-fast);" onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='var(--shadow-xl)'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='var(--shadow-lg)'">
                    <div style="background: linear-gradient(135deg, ${getTierColor(template.tier)} 0%, ${getTierColorDark(template.tier)} 100%); padding: var(--space-6); color: white; position: relative;">
                        <div style="position: absolute; top: var(--space-3); right: var(--space-3); background: rgba(255,255,255,0.2); padding: var(--space-1) var(--space-3); border-radius: var(--radius-full); font-size: 0.75rem; font-weight: 700; text-transform: uppercase;">
                            ${template.tier}
                        </div>
                        <h3 style="font-size: 1.5rem; font-weight: 700; margin-bottom: var(--space-2);">${template.name}</h3>
                        <p style="opacity: 0.9; font-size: 0.875rem; margin-bottom: var(--space-3);">${template.archetype} ‚Ä¢ ${template.format}</p>
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <span style="font-size: 1.25rem; font-weight: 700;">$${template.estimatedPrice} CAD</span>
                            <span style="background: rgba(255,255,255,0.2); padding: var(--space-1) var(--space-3); border-radius: var(--radius-md); font-size: 0.875rem; font-weight: 600;">
                                ${template.winRate} Win Rate
                            </span>
                        </div>
                    </div>
                    
                    <div style="padding: var(--space-6);">
                        <p style="color: var(--gray-700); line-height: 1.6; margin-bottom: var(--space-4);">${template.description}</p>
                        
                        <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: var(--space-3); margin-bottom: var(--space-4);">
                            <div style="text-align: center; padding: var(--space-2); background: var(--gray-50); border-radius: var(--radius-md);">
                                <div style="font-size: 1.125rem; font-weight: 700; color: var(--primary-color);">${template.cardList.main.reduce((sum, card) => sum + card.quantity, 0)}</div>
                                <div style="font-size: 0.75rem; color: var(--gray-600);">Main Deck</div>
                            </div>
                            <div style="text-align: center; padding: var(--space-2); background: var(--gray-50); border-radius: var(--radius-md);">
                                <div style="font-size: 1.125rem; font-weight: 700; color: var(--secondary-color);">${template.cardList.extra.reduce((sum, card) => sum + card.quantity, 0)}</div>
                                <div style="font-size: 0.75rem; color: var(--gray-600);">Extra Deck</div>
                            </div>
                            <div style="text-align: center; padding: var(--space-2); background: var(--gray-50); border-radius: var(--radius-md);">
                                <div style="font-size: 1.125rem; font-weight: 700; color: var(--accent-color);">${template.cardList.side.reduce((sum, card) => sum + card.quantity, 0)}</div>
                                <div style="font-size: 0.75rem; color: var(--gray-600);">Side Deck</div>
                            </div>
                        </div>
                        
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: var(--space-4);">
                            <div style="display: flex; gap: var(--space-2);">
                                <span style="background: ${getDifficultyColor(template.difficulty)}; color: white; padding: var(--space-1) var(--space-2); border-radius: var(--radius-sm); font-size: 0.75rem; font-weight: 600;">
                                    ${template.difficulty}
                                </span>
                                <span style="background: var(--gray-200); color: var(--gray-700); padding: var(--space-1) var(--space-2); border-radius: var(--radius-sm); font-size: 0.75rem; font-weight: 600;">
                                    Updated ${new Date(template.lastUpdated).toLocaleDateString()}
                                </span>
                            </div>
                        </div>
                        
                        <div style="display: flex; gap: var(--space-3);">
                            <button onclick="loadDeckTemplate('${template.id}')" style="flex: 1; padding: var(--space-3); background: var(--primary-color); color: white; border: none; border-radius: var(--radius-md); font-weight: 600; cursor: pointer; transition: var(--transition-fast);">
                                Load Template
                            </button>
                            <button onclick="buyDeckTemplate('${template.id}')" style="flex: 1; padding: var(--space-3); background: var(--secondary-color); color: var(--gray-900); border: none; border-radius: var(--radius-md); font-weight: 600; cursor: pointer; transition: var(--transition-fast);">
                                Buy Deck ($${template.estimatedPrice})
                            </button>
                        </div>
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}

// Helper functions
function getTierColor(tier) {
    const colors = {
        'Tier 1': 'var(--success-color)',
        'Tier 2': 'var(--primary-color)',
        'Tier 3': 'var(--accent-color)',
        'Casual': 'var(--secondary-color)'
    };
    return colors[tier] || 'var(--gray-600)';
}

function getTierColorDark(tier) {
    const colors = {
        'Tier 1': '#059669',
        'Tier 2': '#1d4ed8',
        'Tier 3': '#c2410c',
        'Casual': '#4338ca'
    };
    return colors[tier] || '#374151';
}

function getDifficultyColor(difficulty) {
    const colors = {
        'Beginner': 'var(--success-color)',
        'Intermediate': 'var(--accent-color)',
        'Advanced': 'var(--error-color)'
    };
    return colors[difficulty] || 'var(--gray-600)';
}

// Deck management functions
function editDeck(deckId) {
    if (window.deckBuilder) {
        window.deckBuilder.loadSavedDeck(deckId);
        showDeckBuilder();
    }
}

function duplicateDeck(deckId) {
    if (window.deckBuilder) {
        const savedDecks = window.deckBuilder.getSavedDecks();
        const originalDeck = savedDecks[deckId];
        
        if (originalDeck) {
            const duplicatedDeck = {
                deck: JSON.parse(JSON.stringify(originalDeck.deck)),
                metadata: {
                    ...originalDeck.metadata,
                    name: originalDeck.metadata.name + ' (Copy)',
                    id: undefined,
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                }
            };
            
            window.deckBuilder.loadDeck(duplicatedDeck);
            window.deckBuilder.saveDeck();
            loadUserDecks();
            window.deckBuilder.showToast('Deck duplicated successfully!', 'success');
        }
    }
}

function exportDeck(deckId) {
    if (window.deckBuilder) {
        const savedDecks = window.deckBuilder.getSavedDecks();
        const deckData = savedDecks[deckId];
        
        if (deckData) {
            const currentDeck = window.deckBuilder.currentDeck;
            const currentMetadata = window.deckBuilder.deckMetadata;
            
            window.deckBuilder.currentDeck = deckData.deck;
            window.deckBuilder.deckMetadata = deckData.metadata;
            window.deckBuilder.downloadYDK();
            
            window.deckBuilder.currentDeck = currentDeck;
            window.deckBuilder.deckMetadata = currentMetadata;
        }
    }
}

function deleteDeckConfirm(deckId) {
    const savedDecks = window.deckBuilder ? window.deckBuilder.getSavedDecks() : {};
    const deckData = savedDecks[deckId];
    
    if (deckData && confirm(`Are you sure you want to delete "${deckData.metadata.name}"? This action cannot be undone.`)) {
        if (window.deckBuilder) {
            window.deckBuilder.deleteDeck(deckId);
            loadUserDecks();
        }
    }
}

function testDeck(deckId) {
    alert('Deck testing feature coming soon! This will allow you to test hands and simulate games.');
}

function sortDecks() {
    loadUserDecks();
}

function refreshDeckList() {
    loadUserDecks();
    if (window.deckBuilder) {
        window.deckBuilder.showToast('Deck list refreshed!', 'info');
    }
}

function showTemplateCategory(category) {
    // Update active button
    document.querySelectorAll('#popular-decks-section .filter-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.getElementById(category === 'all' ? 'all-templates-btn' : category + '-btn')?.classList.add('active');
    
    // Filter and display templates
    if (window.deckBuilder) {
        window.deckBuilder.getDeckTemplates().then(templates => {
            let filteredTemplates = templates;
            
            if (category !== 'all') {
                filteredTemplates = templates.filter(template => {
                    switch (category) {
                        case 'meta':
                            return template.tier === 'Tier 1';
                        case 'tier2':
                            return template.tier === 'Tier 2';
                        case 'casual':
                            return template.tier === 'Casual';
                        default:
                            return true;
                    }
                });
            }
            
            const container = document.getElementById('templates-container');
            if (container) {
                container.innerHTML = generateTemplatesGridHTML(filteredTemplates);
            }
        });
    }
}

async function loadDeckTemplate(templateId) {
    if (window.deckBuilder) {
        try {
            await window.deckBuilder.loadDeckTemplate(templateId);
            showDeckBuilder();
        } catch (error) {
            console.error('Error loading template:', error);
            alert('Error loading deck template. Please try again.');
        }
    }
}

function buyDeckTemplate(templateId) {
    alert('This would add all cards from template ' + templateId + ' to your cart.');
}

// Search functionality
let searchTimeout;
async function searchCards() {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(async () => {
        const query = document.getElementById('card-search').value;
        const filters = {
            type: document.getElementById('type-filter').value,
            race: document.getElementById('race-filter').value,
            attribute: document.getElementById('attribute-filter').value,
            level: document.getElementById('level-filter').value
        };

        if (query.length >= 2 || Object.values(filters).some(f => f)) {
            const results = await window.deckBuilder.searchCards(query, filters);
            displaySearchResults(results);
        } else {
            document.getElementById('search-results').innerHTML = `
                <div style="text-align: center; padding: var(--space-8); color: var(--gray-500);">
                    <div style="font-size: 2rem; margin-bottom: var(--space-2);">üîç</div>
                    <p>Search for cards to add to your deck</p>
                </div>
            `;
        }
    }, 300);
}

function displaySearchResults(results) {
    const container = document.getElementById('search-results');
    
    if (results.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; padding: var(--space-8); color: var(--gray-500);">
                <div style="font-size: 2rem; margin-bottom: var(--space-2);">‚ùå</div>
                <p>No cards found</p>
            </div>
        `;
        return;
    }

    container.innerHTML = results.slice(0, 50).map(card => `
        <div class="search-result-card" onclick="addCardToDeck(${JSON.stringify(card).replace(/"/g, '&quot;')})">
            <img src="${card.card_images ? card.card_images[0].image_url_small : 'https://images.ygoprodeck.com/images/cards/back.jpg'}" 
                 alt="${card.name}" class="search-result-image" loading="lazy">
            <div class="search-result-info">
                <div class="search-result-name">${card.name}</div>
                <div class="search-result-type">${getCardTypeDisplay(card)}</div>
                <div class="search-result-stats">${getCardStats(card)}</div>
            </div>
        </div>
    `).join('');
}

function addCardToDeck(card) {
    const section = determineCardSection(card);
    window.deckBuilder.addCardToDeck(card, section, 1);
}

function determineCardSection(card) {
    if (card.type.includes('Fusion') || card.type.includes('Synchro') || 
        card.type.includes('Xyz') || card.type.includes('Link')) {
        return 'extra';
    }
    return 'main';
}

function getCardTypeDisplay(card) {
    if (card.type.includes('Monster')) {
        if (card.type.includes('Effect')) return 'Effect Monster';
        if (card.type.includes('Normal')) return 'Normal Monster';
        if (card.type.includes('Fusion')) return 'Fusion Monster';
        if (card.type.includes('Synchro')) return 'Synchro Monster';
        if (card.type.includes('Xyz')) return 'Xyz Monster';
        if (card.type.includes('Link')) return 'Link Monster';
        return 'Monster';
    }
    if (card.type.includes('Spell')) return 'Spell Card';
    if (card.type.includes('Trap')) return 'Trap Card';
    return card.type;
}

function getCardStats(card) {
    if (card.type.includes('Monster')) {
        if (card.type.includes('Link')) {
            return `LINK-${card.linkval || '?'} | ATK: ${card.atk || '?'}`;
        } else {
            return `Level ${card.level || '?'} | ATK: ${card.atk || '?'} | DEF: ${card.def || '?'}`;
        }
    }
    return '';
}
