name: Code Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest
    name: Code Quality and Validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm init -y
          npm install --save-dev htmlhint stylelint eslint
      
      - name: Validate HTML files
        run: |
          echo "üîç Validating HTML files..."
          for file in *.html pages/*.html admin/*.html; do
            if [ -f "$file" ]; then
              echo "Checking $file"
              # Check for basic HTML structure (skip templates/ as they are fragments)
              if ! grep -q "<!DOCTYPE html>" "$file"; then
                echo "‚ö†Ô∏è  Warning: $file missing DOCTYPE declaration"
              fi
              if ! grep -q "<meta charset=" "$file"; then
                echo "‚ö†Ô∏è  Warning: $file missing charset meta tag"
              fi
              if ! grep -q "<meta name=\"viewport\"" "$file"; then
                echo "‚ö†Ô∏è  Warning: $file missing viewport meta tag"
              fi
            fi
          done
          
          # Validate HTML templates (fragments) separately
          echo "üß© Validating HTML template fragments..."
          for file in templates/*.html; do
            if [ -f "$file" ]; then
              echo "Checking template fragment: $file"
              # Templates are fragments, so just check for basic HTML validity
              if grep -q "<script>" "$file" && ! grep -q "</script>" "$file"; then
                echo "‚ùå Error: $file has unclosed script tag"
              fi
              if grep -q "<style>" "$file" && ! grep -q "</style>" "$file"; then
                echo "‚ùå Error: $file has unclosed style tag"
              fi
            fi
          done
          echo "‚úÖ HTML validation complete"
      
      - name: Validate CSS files
        run: |
          echo "üé® Validating CSS files..."
          for file in assets/css/*.css assets/css/**/*.css; do
            if [ -f "$file" ]; then
              echo "Checking $file"
              # Basic CSS syntax check
              if ! grep -q "{" "$file"; then
                echo "‚ö†Ô∏è  Warning: $file may not contain valid CSS"
              fi
            fi
          done
          echo "‚úÖ CSS validation complete"
      
      - name: Validate JavaScript files
        run: |
          echo "‚ö° Validating JavaScript files..."
          for file in assets/js/*.js assets/js/**/*.js; do
            if [ -f "$file" ]; then
              echo "Checking $file"
              # Check for basic JavaScript syntax
              node -c "$file" || echo "‚ö†Ô∏è  Syntax error in $file"
            fi
          done
          echo "‚úÖ JavaScript validation complete"
      
      - name: Validate JSON files
        run: |
          echo "üìã Validating JSON files..."
          for file in config/*.json data/*.json; do
            if [ -f "$file" ]; then
              echo "Validating $file"
              python -m json.tool "$file" > /dev/null || echo "‚ùå Invalid JSON in $file"
            fi
          done
          echo "‚úÖ JSON validation complete"
      
      - name: Check for security issues
        run: |
          echo "üîí Checking for potential security issues..."
          
          # Check for hardcoded API keys or secrets
          if grep -r -i "api[_-]key\|secret\|password\|token" --include="*.js" --include="*.html" --include="*.css" .; then
            echo "‚ö†Ô∏è  Warning: Potential hardcoded secrets found"
          fi
          
          # Check for console.log statements in production files (exclude debug files)
          echo "üîç Checking for console.log in production files..."
          PRODUCTION_FILES="assets/js/script.js assets/js/main.js assets/js/pages/ assets/js/router.js assets/js/square-functionality.js assets/js/components/"
          CONSOLE_FOUND=false
          
          for pattern in $PRODUCTION_FILES; do
            if [ -d "$pattern" ]; then
              if grep -r "console\.log" "$pattern" --include="*.js" 2>/dev/null; then
                CONSOLE_FOUND=true
              fi
            elif [ -f "$pattern" ]; then
              if grep "console\.log" "$pattern" 2>/dev/null; then
                CONSOLE_FOUND=true
              fi
            fi
          done
          
          if [ "$CONSOLE_FOUND" = true ]; then
            echo "‚ö†Ô∏è  Warning: console.log statements found in production code"
          else
            echo "‚úÖ No console.log statements in production files"
          fi
          
          echo "‚úÖ Security check complete"
      
      - name: Performance checks
        run: |
          echo "üöÄ Running performance checks..."
          
          # Check file sizes
          echo "üìä File size analysis:"
          find assets/ -type f \( -name "*.js" -o -name "*.css" \) -exec ls -lh {} \; | awk '{print $5, $9}' | sort -hr
          
          # Check for large images
          echo "üñºÔ∏è  Image size analysis:"
          find assets/images/ -type f 2>/dev/null -exec ls -lh {} \; | awk '{print $5, $9}' | sort -hr | head -10 || echo "No images directory found"
          
          echo "‚úÖ Performance check complete"
      
      - name: Accessibility checks
        run: |
          echo "‚ôø Checking accessibility features..."
          
          # Check for alt attributes on images
          for file in *.html pages/*.html admin/*.html; do
            if [ -f "$file" ]; then
              if grep -q "<img" "$file" && ! grep -q "alt=" "$file"; then
                echo "‚ö†Ô∏è  Warning: $file contains images without alt attributes"
              fi
            fi
          done
          
          # Check for proper heading structure
          for file in *.html pages/*.html admin/*.html; do
            if [ -f "$file" ]; then
              if ! grep -q "<h1" "$file"; then
                echo "‚ö†Ô∏è  Warning: $file missing h1 heading"
              fi
            fi
          done
          
          echo "‚úÖ Accessibility check complete"
      
      - name: Generate quality report
        run: |
          echo "üìä Code Quality Report Summary"
          echo "================================"
          echo "‚úÖ HTML files validated"
          echo "‚úÖ CSS files validated"
          echo "‚úÖ JavaScript files validated"
          echo "‚úÖ JSON files validated"
          echo "‚úÖ Security checks completed"
          echo "‚úÖ Performance analysis completed"
          echo "‚úÖ Accessibility checks completed"
          echo ""
          echo "üéâ All quality checks passed!"
