#!/usr/bin/env node

/**
 * Code Quality Fix Script
 * Removes console.log statements from production JavaScript files
 * and fixes other code quality issues for GitHub Actions
 */

const fs = require('fs');
const path = require('path');

// Files to clean up (remove console.log statements)
const jsFilesToClean = [
    'assets/js/script.js',
    'assets/js/main.js',
    'assets/js/pages/home.js',
    'assets/js/pages/decks.js',
    'assets/js/pages/singles.js',
    'assets/js/router.js',
    'assets/js/square-functionality.js',
    'assets/js/components/advanced-functionality.js'
];

// Files to keep console.log (development/debug files)
const debugFiles = [
    'assets/js/database-init.js',
    'assets/js/services/pricecharting-api-service.js',
    'assets/js/services/tcgplayer-api-service.js',
    'assets/js/services/deck-builder-service.js'
];

function removeConsoleLog(filePath) {
    try {
        if (!fs.existsSync(filePath)) {
            console.log(`⚠️  File not found: ${filePath}`);
            return;
        }

        let content = fs.readFileSync(filePath, 'utf8');
        const originalLines = content.split('\n').length;
        
        // Remove console.log statements but preserve console.error and console.warn
        content = content.replace(/^\s*console\.log\([^)]*\);\s*$/gm, '');
        content = content.replace(/\s*console\.log\([^)]*\);\s*/g, ' ');
        
        // Clean up empty lines that might be left behind
        content = content.replace(/\n\s*\n\s*\n/g, '\n\n');
        
        const newLines = content.split('\n').length;
        const removedLines = originalLines - newLines;
        
        fs.writeFileSync(filePath, content, 'utf8');
        
        if (removedLines > 0) {
            console.log(`✅ ${filePath}: Removed ${removedLines} lines with console.log`);
        } else {
            console.log(`✅ ${filePath}: No console.log statements found`);
        }
    } catch (error) {
        console.error(`❌ Error processing ${filePath}:`, error.message);
    }
}

function addProductionComments(filePath) {
    try {
        if (!fs.existsSync(filePath)) {
            return;
        }

        let content = fs.readFileSync(filePath, 'utf8');
        
        // Add production-ready comment at the top if not already present
        if (!content.includes('Production-ready')) {
            const header = `/**
 * Production-ready JavaScript
 * Console.log statements removed for production deployment
 * Generated by fix-code-quality.js
 */

`;
            content = header + content;
            fs.writeFileSync(filePath, content, 'utf8');
            console.log(`📝 Added production header to ${filePath}`);
        }
    } catch (error) {
        console.error(`❌ Error adding header to ${filePath}:`, error.message);
    }
}

console.log('🔧 Starting code quality fixes...\n');

// Clean production JavaScript files
console.log('📦 Cleaning production JavaScript files:');
jsFilesToClean.forEach(file => {
    removeConsoleLog(file);
    addProductionComments(file);
});

console.log('\n📋 Debug files (keeping console.log):');
debugFiles.forEach(file => {
    if (fs.existsSync(file)) {
        console.log(`🔍 ${file}: Debug file - console.log preserved`);
    }
});

console.log('\n✅ Code quality fixes completed!');
console.log('\n📊 Summary:');
console.log('- Removed console.log from production files');
console.log('- Preserved console.log in debug/development files');
console.log('- Added production-ready headers');
console.log('- Ready for GitHub Actions deployment');
